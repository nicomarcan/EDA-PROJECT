
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

public class AirportManager {
	private Map<String,Node> airports = new HashMap<String,Node>();
	private Map<Entry,Flight> flights = new HashMap<Entry,Flight>();

	public void addAirport(Airport airport){
		if(!airports.containsKey(airport.getName())){
			airports.put(airport.getName(),new Node(airport));
		}
	}
	
	public void deleteAirport(String name){
		if(airports.containsKey(name)){
			airports.remove(name);
		}
	}
	
	public void addAirports(List<Airport> airports){
		for(Airport a : airports){
			addAirport(a);
		}
	}

	public void deleteAirports(List<String> airports){
		for(String s : airports){
			deleteAirport(s);
		}
	}
	
	public void addFlight(Flight f){
		if(!airports.containsKey(f.origin) || ! airports.containsKey(f.target))
			return;
		if(!airports.get(f.origin).priceOrder.contains(f)){
			airports.get(f.origin).priceOrder.add(f);
			airports.get(f.origin).timeOrder.add(f);
		}
		
	}
	
	public void deleteFlight(String airline,String flightNumber){
		if(flights.containsKey(new Entry(airline,flightNumber))){
			Airport origin = flights.get(new Entry(airline,flightNumber)).origin;
		}
	}
	





	private static class Node{
		Airport airport;
		Set<Flight> priceOrder = new TreeSet<Flight>();
		Set<Flight> timeOrder = new TreeSet<Flight>();
		public boolean visited;
		
		public Node(Airport airport) {
			super();
			this.airport = airport;
		}
		
		
	}
	
	
	private static class Flight{
		private String airline;
		private int flightNumber;
		private Day[] days;
		private Airport target;
		private int price;
		private int flightTime;
		private int departureTime;
		private Airport origin;
		
		public Flight(String airline, int flightNumber, Day[] days, Airport target, int price, int flightTime,
				int departureTime, Airport origin) {
			super();
			airline = airline;
			this.flightNumber = flightNumber;
			this.days = days;
			this.target = target;
			this.price = price;
			this.flightTime = flightTime;
			this.departureTime = departureTime;
			this.origin = origin;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((airline == null) ? 0 : airline.hashCode());
			result = prime * result + flightNumber;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Flight other = (Flight) obj;
			if (airline == null) {
				if (other.airline != null)
					return false;
			} else if (!airline.equals(other.airline))
				return false;
			if (flightNumber != other.flightNumber)
				return false;
			return true;
		}
			
		
	}
	private static class Entry{
		private String airline;
		private String flightNumber;
		public Entry(String airline, String flightNumber) {
			super();
			this.airline = airline;
			this.flightNumber = flightNumber;
		}
		
	}
	 
}
