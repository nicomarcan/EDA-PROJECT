<<<<<<< HEAD
package TPE;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;
/** cambiar regexp en readflight**/
public class FileManager {

	public boolean writeRoute(List<Flight> route, String nameFile, boolean stdout, String format){
		String kmlFormat = "kml";
		String txtFormat = "txt";
		String newLine = System.getProperty("line.separator");
		
		double price = 0;
		int flightTime = 0;
		int totalTime = 0;/** falta hacer esto**/
		
		for(Flight fl: route){
			price += fl.getPrice();
			flightTime += fl.getFlightTime();
		}
		
		int hoursFlight = flightTime/60;
		int minutesFlight = flightTime%60;
		
		if(Pattern.matches(txtFormat, format)) {
			if(stdout) {
				System.out.println("Precio#" + price);
				System.out.println("TiempoVuelo#" + hoursFlight + "h" + minutesFlight + "m");
				for(Flight fl: route){
					System.out.println(fl.getOrigin() + "#" + fl.getAirline() + "#" + fl.getFlightNumber()+ "#" + fl.getTarget()+"#"+fl.getDays());
				}
			} else {
				try {
					File toWrite = new File("F:/git/eda-2016-04/TPE/src/Datos",nameFile+ "." + format);
					FileWriter writer = new FileWriter(toWrite, true);
					writer.write("Precio#" + price + newLine);
					writer.write("TiempoVuelo#" + hoursFlight + "h" + minutesFlight + "m" + newLine);
					for(Flight fl: route){
						writer.write(fl.getOrigin() + "#" + /* aerolinea + "#" + codigo de vuelo + */ "#" + fl.getTarget() + newLine);
					}
					writer.close();
				} catch (IOException e) {
					System.out.println("NotFound");
					return false;
				}
			}
		} else if(Pattern.matches(kmlFormat, format)){
			if(stdout) {
				System.out.println("<?xml version=" + "\"1.0\"" + " encoding=" + "\"UTF-8\"" + "?>");
				System.out.println("<kml xmlns=" + "\"http://www.opengis.net/kml/2.2\"" + ">");
				System.out.println("<Placemark>");
				System.out.println("<Precio> " + price + " </Precio>");
				System.out.println("<TiempoVuelo> " + hoursFlight + "h" + minutesFlight + "m" + " </TiempoVuelo>");
				System.out.println("<TiempoTotal> " + /*hoursFlight + "h" + minutesFlight + "m" + */ " </TiempoTotal>");
				System.out.println("<Ruta>");
				for(Flight fl: route){
					System.out.println("<Origen> " + fl.getOrigin() + " </Origen>");
					System.out.println("<Aeroliena> " + /* aerolinea + */ " </Aeroliena>");
					System.out.println("<NroVuelo> " + /* codigo de vuelo + */ " </NroVuelo>");
					System.out.println("<Destino> " + fl.getTarget() + " </Destino>");
				}
				System.out.println("</Ruta>");
				System.out.println("</Placemark>");
				System.out.println("</kml>");
			} else {
				try {
					File toWrite = new File("F:/git/eda-2016-04/TPE/src/Datos",nameFile+ "." + format);
					FileWriter writer = new FileWriter(toWrite, true);
					writer.write("<?xml version=" + "\"1.0\"" + " encoding=" + "\"UTF-8\"" + "?>" + newLine);
					writer.write("<kml xmlns=" + "\"http://www.opengis.net/kml/2.2\"" + ">" + newLine);
					writer.write("<Placemark>" + newLine);
					writer.write("<Precio> " + price + " </Precio>" + newLine);
					writer.write("<TiempoVuelo> " + hoursFlight + "h" + minutesFlight + "m" + " </TiempoVuelo>"  + newLine);
					writer.write("<TiempoTotal> " + /*hoursFlight + "h" + minutesFlight + "m" + */ " </TiempoTotal>"  + newLine);
					writer.write("<Ruta>" + newLine);
					for(Flight fl: route){
						writer.write("<Origen> " + fl.getOrigin() + " </Origen>" + newLine);
						writer.write("<Aeroliena> " + /* aerolinea + */ " </Aeroliena>" + newLine);
						writer.write("<NroVuelo> " + /* codigo de vuelo + */ " </NroVuelo>" + newLine);
						writer.write("<Destino> " + fl.getTarget() + " </Destino>" + newLine);
					}
					writer.write("</Ruta>" + newLine);
					writer.write("</Placemark>" + newLine);
					writer.write("</kml>" + newLine);
					writer.close();
				} catch (IOException e) {
					System.out.println("NotFound");
					return false;
				} 
			} 
		} else {
			System.out.println("NotFound");
			return false;
		}
		
		return true;	
	}
	
	public  void readFlights(String file) throws FileNotFoundException{
		FlightCreator flightC = new FlightCreator();
		//System.out.println(file);
		File toRead = new File("C:/Users/Usuario/Documents/eda-2016-04/TPE/src/Datos",file);
		try {
			int i = 1;
			Scanner sc = new Scanner(toRead);
	        while(sc.hasNextLine()){
	        	String s = sc.nextLine();
	        	String format = "[a-z A-Z]{1,3}#[0-9]{1,7}#(Lu|Ma|Mi|Ju|Vi|Sa|Do)(-(Lu|Ma|Mi|Ju|Vi|Sa|Do))*#[a-z A-Z]{1,3}#[a-z A-Z]{1,3}#([0-1][0-9]|2[0-3]):[0-5][0-9]#([1-9]h|[1-9][0-9]h)?([0-9]|[1-5][0-9])m#[0-9]+\\.[0-9]+$";
		        if(!Pattern.matches(format, s)){
		        	System.out.println("formato no valido, tiene un error en la linea "+i);
		        	System.out.println(s);
		        }
		        i++;
		       String[] res =  s.split("#");
		        flightC.addFlight(res[0], res[1], res[2], res[3], res[4], res[5], res[6], new Double(res[7]));
		        
		    	        		        	
	        }
		} catch (FileNotFoundException e) {
			System.out.println("NotFound");
		}
		
   
	}
	
	public  void readAirports(String name) throws IOException, ClassNotFoundException {
			AirportCreator airportC = new AirportCreator();
	        File toRead = new File("C:/Users/Usuario/Documents/eda-2016-04/TPE/src/Datos",name);
	        try {
	        	Scanner sc = new Scanner(toRead);
	        	while(sc.hasNextLine()){
		        	String s = sc.nextLine();
		        	String format = "[a-z A-Z]{3}#-?[0-9]+\\.[0-9]+#-?[0-9]+\\.[0-9]+$";
			        if(!Pattern.matches(format, s)){
			        	System.out.println("formato no valido");
			        	System.out.println(s);
			        }
			       String[] res = s.split("#");
			       airportC.addAirport(res[0], new Double(res[1]), new Double(res[2]));
		        }
			} catch (IOException e) {
				System.out.println("NotFound");
			} 
	    }
	
	  
	
}
=======
package TPE;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;
/** cambiar regexp en readflight**/
public class FileManager {

	public boolean writeRoute(List<Flight> route, String nameFile, boolean stdout, String format){
		String kmlFormat = "kml";
		String txtFormat = "txt";
		String newLine = System.getProperty("line.separator");
		
		double price = 0;
		int flightTime = 0;
		int totalTime = 0;/** falta hacer esto**/
		
		for(Flight fl: route){
			price += fl.getPrice();
			flightTime += fl.getFlightTime();
		}
		
		int hoursFlight = flightTime/60;
		int minutesFlight = flightTime%60;
		
		if(Pattern.matches(txtFormat, format)) {
			if(stdout) {
				System.out.println("Precio#" + price);
				System.out.println("TiempoVuelo#" + hoursFlight + "h" + minutesFlight + "m");
				for(Flight fl: route){
					System.out.println(fl.getOrigin() + "#" + fl.getAirline() + "#" + fl.getFlightNumber()+ "#" + fl.getTarget()+"#"+fl.getDays());
				}
			} else {
				try {
					File toWrite = new File("F:/git/eda-2016-04/TPE/src/Datos",nameFile+ "." + format);
					FileWriter writer = new FileWriter(toWrite, true);
					writer.write("Precio#" + price + newLine);
					writer.write("TiempoVuelo#" + hoursFlight + "h" + minutesFlight + "m" + newLine);
					for(Flight fl: route){
						writer.write(fl.getOrigin() + "#" + fl.getAirline() + "#" + fl.getFlightNumber() + "#" + fl.getTarget() + newLine);
					}
					writer.close();
				} catch (IOException e) {
					System.out.println("NotFound");
					return false;
				}
			}
		} else if(Pattern.matches(kmlFormat, format)){
			if(stdout) {
				System.out.println("<?xml version=" + "\"1.0\"" + " encoding=" + "\"UTF-8\"" + "?>");
				System.out.println("<kml xmlns=" + "\"http://www.opengis.net/kml/2.2\"" + ">");
				System.out.println("<Document>");	// no se si hace falta este
				// TODO el tiempo vuelo y tiempo total en la descripcion estan iguales
				System.out.println("<description>" + "Precio: " + price + " TiempoVuelo: " + hoursFlight + "h" + minutesFlight + "m" + " TiempoTotal: " + hoursFlight + "h" + minutesFlight + "m" + "</description>");
				// El primer aeropuerto
				System.out.println("<Placemark>");
				System.out.println("<name>" + route.get(0).getAirline() + "#" + route.get(0).getFlightNumber() + "</name>");
				System.out.println("<Point>");
				System.out.println("<Description></Description>");
				System.out.println("<coordinates>" + route.get(0).getOriginAirport().getLatitude() + ", " + route.get(0).getOriginAirport().getLongitude() + ",0" + "</coordinates>");
				System.out.println("</Point>");
				System.out.println("</Placemark>");
				for(Flight fl : route) {
					// El vuelo
					System.out.println("<Placemark>");
					System.out.println("<name>" + fl.getAirline() + "#" + fl.getFlightNumber() + "</name>");
					System.out.println("<LineString>");
					System.out.println("<tessellate>0</tessellate>");
					System.out.println("<coordinates>" + fl.getOriginAirport().getLatitude() + ", " + fl.getOriginAirport().getLongitude() + ",0");
					System.out.println(fl.getDestinationAirport().getLatitude() + ", " + fl.getDestinationAirport().getLongitude() + ",0" + "</coordinates>");
					System.out.println("</LineString>");
					System.out.println("</Placemark>");
					// El aeropuerto destino
					System.out.println("<Placemark>");
					System.out.println("<name>" + fl.getTarget() + "</name>");
					System.out.println("<Point>");
					System.out.println("<Description></Description>");
					System.out.println("<coordinates>" + fl.getDestinationAirport().getLatitude() + ", " + fl.getDestinationAirport().getLongitude() + ",0" + "</coordinates>");
					System.out.println("</Point>");
					System.out.println("</Placemark>");
				}
				System.out.println("</Document>");	// no se si hace falta este
				System.out.println("</kml>");
			} else {
				try {
					File toWrite = new File("F:/git/eda-2016-04/TPE/src/Datos",nameFile+ "." + format);
					FileWriter writer = new FileWriter(toWrite, true);
					writer.write("<?xml version=" + "\"1.0\"" + " encoding=" + "\"UTF-8\"" + "?>" + newLine);
					writer.write("<kml xmlns=" + "\"http://www.opengis.net/kml/2.2\"" + ">" + newLine);
					writer.write("<Document>" + newLine);	// no se si hace falta este
					// TODO el tiempo vuelo y tiempo total en la descripcion estan iguales
					writer.write("<description>" + "Precio: " + price + " TiempoVuelo: " + hoursFlight + "h" + minutesFlight + "m" + " TiempoTotal: " + hoursFlight + "h" + minutesFlight + "m" + "</description>" + newLine);
					// El primer aeropuerto
					writer.write("<Placemark>" + newLine);
					writer.write("<name>" + route.get(0).getAirline() + "#" + route.get(0).getFlightNumber() + "</name>" + newLine);
					writer.write("<Point>" + newLine);
					writer.write("<Description></Description>" + newLine);
					writer.write("<coordinates>" + route.get(0).getOriginAirport().getLatitude() + ", " + route.get(0).getOriginAirport().getLongitude() + ",0" + "</coordinates>" + newLine);
					writer.write("</Point>" + newLine);
					writer.write("</Placemark>" + newLine);
					for(Flight fl : route) {
						// El vuelo
						writer.write("<Placemark>" + newLine);
						writer.write("<name>" + fl.getAirline() + "#" + fl.getFlightNumber() + "</name>" + newLine);
						writer.write("<LineString>" + newLine);
						writer.write("<tessellate>0</tessellate>" + newLine);
						writer.write("<coordinates>" + fl.getOriginAirport().getLatitude() + ", " + fl.getOriginAirport().getLongitude() + ",0" + newLine);
						writer.write(fl.getDestinationAirport().getLatitude() + ", " + fl.getDestinationAirport().getLongitude() + ",0" + "</coordinates>" + newLine);
						writer.write("</LineString>" + newLine);
						writer.write("</Placemark>" + newLine);
						// El aeropuerto destino
						writer.write("<Placemark>" + newLine);
						writer.write("<name>" + fl.getTarget() + "</name>" + newLine);
						writer.write("<Point>" + newLine);
						writer.write("<Description></Description>" + newLine);
						writer.write("<coordinates>" + fl.getDestinationAirport().getLatitude() + ", " + fl.getDestinationAirport().getLongitude() + ",0" + "</coordinates>" + newLine);
						writer.write("</Point>" + newLine);
						writer.write("</Placemark>" + newLine);
					}
					writer.write("</Document>" + newLine);	// no se si hace falta este
					writer.write("</kml>" + newLine);
					writer.close();
				} catch (IOException e) {
					System.out.println("NotFound");
					return false;
				} 
			} 
		} else {
			System.out.println("NotFound");
			return false;
		}
		
		return true;	
	}
	
	public  void readFlights(String file) throws FileNotFoundException{
		FlightCreator flightC = new FlightCreator();
		//System.out.println(file);
		File toRead = new File("/home/nmarcantonio/eda-2016-04/TPE/src/Datos",file);
		try {
			int i = 1;
			Scanner sc = new Scanner(toRead);
	        while(sc.hasNextLine()){
	        	String s = sc.nextLine();
	        	String format = "[a-z A-Z]{1,3}#[0-9]{1,7}#(Lu|Ma|Mi|Ju|Vi|Sa|Do)(-(Lu|Ma|Mi|Ju|Vi|Sa|Do))*#[a-z A-Z]{1,3}#[a-z A-Z]{1,3}#([0-1][0-9]|2[0-3]):[0-5][0-9]#([1-9]h|[1-9][0-9]h)?([0-9]|[1-5][0-9])m#[0-9]+\\.[0-9]+$";
		        if(!Pattern.matches(format, s)){
		        	System.out.println("formato no valido, tiene un error en la linea "+i);
		        	System.out.println(s);
		        }
		        i++;
		       String[] res =  s.split("#");
		        flightC.addFlight(res[0], res[1], res[2], res[3], res[4], res[5], res[6], new Double(res[7]));
		        
		    	        		        	
	        }
		} catch (FileNotFoundException e) {
			System.out.println("NotFound");
		}
		
   
	}
	
	public  void readAirports(String name) throws IOException, ClassNotFoundException {
			AirportCreator airportC = new AirportCreator();
	        File toRead = new File("/home/nmarcantonio/eda-2016-04/TPE/src/Datos",name);
	        try {
	        	Scanner sc = new Scanner(toRead);
	        	while(sc.hasNextLine()){
		        	String s = sc.nextLine();
		        	String format = "[a-z A-Z]{3}#-?[0-9]+\\.[0-9]+#-?[0-9]+\\.[0-9]+$";
			        if(!Pattern.matches(format, s)){
			        	System.out.println("formato no valido");
			        	System.out.println(s);
			        }
			       String[] res = s.split("#");
			       airportC.addAirport(res[0], new Double(res[1]), new Double(res[2]));
		        }
			} catch (IOException e) {
				System.out.println("NotFound");
			} 
	    }
	
	  
	
}
>>>>>>> b6a438150d6714b0eb67d85381e7d509a7035283
