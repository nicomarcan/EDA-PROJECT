package TPE;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import TPE.AirportManager.Node;

public class PathFinder {
	public static List<Flight> findPath(Set<Node> airports,Node source,Node dest,List<Day> departDays){
		Set<Integer> interval = new TreeSet<Integer>();
		Set<Node> posibleAirports = new HashSet<Node>();
 		for(int i = 0;i<departDays.size();i++){
			for(Node a : airports){
				if(!a.equals(source)){
					for(Flight f : source.priceFlight.get(a.airport).get(departDays.get(i))){
						interval.add(f.getDepartureTime()+f.getCurrentDayIndex()*60*24);
					}
				}
			}
		}
		 Collection<ArriveFunction> af = timeRefinement(airports,source,dest,interval);
	}

	private static Collection<ArriveFunction> timeRefinement(Set<Node> airports, Node source, Node dest,
			Set<Integer> interval) {
		// TODO Auto-generated method stub
		return null;
		
		
		
	}
	


}
